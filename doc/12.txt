event handler
in Event_Handler_Class/index.jsx
---

### âœ… Full Code (cleaned up):

```jsx
import React, { Component } from "react";

class Event_Handler_Class extends Component {
  constructor(props) {
    super(props);
    this.state = {
      changedValue: ''
    };
  }

  handleOnChange = (e) => {
    this.setState({
      changedValue: e.target.value
    });
  };

  render() {
    return (
      <div>
        <input type="text" onChange={this.handleOnChange} />
        <p>{this.state.changedValue}</p>
      </div>
    );
  }
}

export default Event_Handler_Class;
```

---

## ðŸ§  Step-by-Step Explanation:

### 1. âœ… `import React, { Component } from "react";`
You are importing **React** and the **Component** class from the React library to create a class-based component.

---

### 2. âœ… `class Event_Handler_Class extends Component { ... }`
You define a class component named `Event_Handler_Class` that extends `Component`, which gives it React features like `state`, `render()`, and lifecycle methods.

---

### 3. âœ… Constructor:
```js
constructor(props) {
  super(props);
  this.state = {
    changedValue: ''
  };
}
```
- `constructor` is used to initialize state.
- `super(props)` is required when using `props` inside constructor.
- `this.state.changedValue` is initialized as an empty string.

---

### 4. âœ… `handleOnChange` method:
```js
handleOnChange = (e) => {
  this.setState({
    changedValue: e.target.value
  });
};
```
- This is an **arrow function** to handle the `onChange` event from the input field.
- It receives an **event object** `e`.
- `e.target.value` gets the current value of the input field.
- `this.setState()` updates `changedValue` in state.

---

### 5. âœ… `render()` method:
```js
return (
  <div>
    <input type="text" onChange={this.handleOnChange} />
    <p>{this.state.changedValue}</p>
  </div>
);
```
- Renders an input field.
- When the input changes, `handleOnChange` is called.
- `this.state.changedValue` is shown live inside the `<p>` tag as the user types.

---

### ðŸ§ª Example Output:
If the user types:
```
Hello Rafsan!
```
Then the `<p>` will instantly show:
```
Hello Rafsan!
```

---

### âœ… Summary:

| Part               | Purpose                                                                 |
|--------------------|-------------------------------------------------------------------------|
| `constructor`      | Initializes state                                                       |
| `this.state`       | Holds the dynamic value                                                 |
| `handleOnChange`   | Updates state based on user input                                       |
| `render()`         | Displays the input field and the updated text from state               |
| `onChange`         | Triggers the event handler whenever input changes                      |

---

Let me know if you want to add a **reset button**, **character counter**, or convert this to a **functional component with hooks**! ðŸš€